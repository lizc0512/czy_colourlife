打包注意修改

1.小白鼠
2.彩之云和IM的环境切换
3,应用的名称
4.进行爱加密加密

门禁调试账号:15220114019   c123467    Z
15400000011  1234456  Z
15400000012  1234456  Z
15400000030

{"errorCode":"0010","payStatus":"JDP_PAY_FAIL"}

gradlew assembleRelease  执行的是打基础包的操作
gradlew buildTinkerPatchRelease 执行打补丁包的操作

keytool -list  -v -keystore colourlife.keystore

包名:cn.net.cyberway

别名: colourlife
 MD5:  99:EF:81:C4:ED:E8:2A:01:22:9D:55:AC:08:26:F0:4D
 SHA1: A3:ED:2B:C9:33:D9:ED:55:C5:D1:FD:39:DF:26:46:CE:28:75:40:91
 SHA256: 30:11:C2:C8:B4:30:34:EE:1A:DA:66:8C:67:71:05:7B:13:A4:58:38:A9:73:75:16:30:44:F0:19:79:A7:71:87


别名: colourlifes
MD5:  65:7D:D1:CC:E5:F4:9C:C6:F2:69:23:36:77:64:09:21
SHA1: FB:2F:03:9A:8D:3E:7C:59:28:2D:0C:F4:D9:23:76:C3:4C:64:15:81
SHA256: 73:00:F3:AE:01:4A:71:90:58:47:B2:0B:2D:94:F9:AD:77:9D:01:06:A7:8C:6A:9C:C5:CC:83:E8:9B:E7:4A:D8

钉钉的开发资料
99ef81c4ede82a01229d55ac0826f04d
AppId：dingoaklug8ansapsbc9l0
AppSecret：tyV--ScgRmVo43n_ZZaAMJ-qwMR3bZzy1zRWllrymRtFVbOJe9bNPpKuZLvJ5MCP



oppo推送开放平台:
AppID:2331923
AppKey:9648bpSLO44C0WooccW8kkOkk
AppSecret:1Bb067A9a366132a70364E012203acF6

xiaomi推送平台:
AppID:2882303761517212612
AppKey:5121721273612
AppSecret:674b2JSfCAQ/xV/aqabGag==

MiPushClient.getRegId(getApplicationContext());//推送成功设置

魅族:




华为：




vivo:








if (("4.4.3".equals(android.os.Build.VERSION.RELEASE)) || ("4.4.4".equals(android.os.Build.VERSION.RELEASE))) {
//兼容这两个版本设置referer无效的问题
view.loadDataWithBaseURL("商户申请H5时提交的授权域名", "<script>window.location.href=\"" + targetUrl + "\";</script>", "text/html", "utf-8", null);
} else {
 Map<String, String> extraHeaders = new HashMap<>();
  extraHeaders.put("Referer", "商户申请H5时提交的授权域名");
   view.loadUrl(targetUrl, extraHeaders);
}

    @JavascriptInterface
        public void colourlifeWXMiniProgramActivity(String json) {
            if (!TextUtils.isEmpty(json)) {
                try {
                    JSONObject jsonObject = new JSONObject(json);
                    String appid = jsonObject.getString("userName");
                    String path = jsonObject.getString("path");
                    Platform wechat = ShareSDK.getPlatform(Wechat.NAME);
                    oks = new OnekeyShare();
                    oks.setSilent(true);
                    //隐藏自带的分享列表
                    oks.setPlatform(wechat.getName());

                    oks.setShareContentCustomizeCallback(new ShareContentCustomizeCallback() {
                        @Override
                        public void onShare(Platform platform,
                                            cn.sharesdk.framework.Platform.ShareParams paramsToShare) {
                            paramsToShare.setShareType(Platform.OPEN_WXMINIPROGRAM);
                            paramsToShare.setWxUserName(appid);
                            paramsToShare.setWxMiniProgramType(WXLaunchMiniProgram.Req.MINIPTOGRAM_TYPE_RELEASE);
                            paramsToShare.setWxPath(path);
                        }
                    });
                    oks.setCallback(new PlatformActionListener() {
                        @Override
                        public void onComplete(final Platform platform, int i, HashMap<String, Object> hashMap) {
                            WebViewActivity.this.runOnUiThread(new Runnable() {
                                @Override
                                public void run() {
                                    if (i == Platform.OPEN_WXMINIPROGRAM) {
                                        ToastUtil.toastShow(WebViewActivity.this, "打开小程序");
                                    }
                                }
                            });
                        }

                        @Override
                        public void onError(final Platform platform, int i, final Throwable throwable) {
                            WebViewActivity.this.runOnUiThread(new Runnable() {
                                @Override
                                public void run() {

                                }
                            });
                        }

                        @Override
                        public void onCancel(final Platform platform, int i) {
                            WebViewActivity.this.runOnUiThread(new Runnable() {
                                @Override
                                public void run() {

                                }
                            });
                        }
                    });
                    // 启动分享
                    oks.show(WebViewActivity.this);
                } catch (JSONException e) {
                    e.printStackTrace();
                }
            }
        }


    //        boolean isIntercepted = false;
    //        //https://www.jianshu.com/p/ebaedd551365
    //        if (urls.startsWith("http")) {
    //            final PayTask task = new PayTask(WebViewActivity.this); //支持原生APP调用
    //            //webView处理必须在同一个线程上
    //            isIntercepted = task.payInterceptorWithUrl(urls, true, new H5PayCallback() {
    //
    //                @Override
    //                public void onPayResult(final H5PayResultModel result) {
    //                    /*
    //                    resultCode
    //	                String返回码，标识支付状态，含义如下：
    //	                9000——订单支付成功

    //	                8000——正在处理中
    //	                4000——订单支付失败
    //	                5000——重复请求
    //	                6001——用户中途取消
    //	                6002——网络连接出错
    //                    returnUrl  String支付结束后应当跳转的 url 地址
    //                     */
    //                    // 支付结果返回
    //                    final String url = result.getReturnUrl();
    //                    if (!TextUtils.isEmpty(url)) {
    //                        WebViewActivity.this.runOnUiThread(new Runnable() {
    //                            @Override
    //                            public void run() {
    //                                webView.loadUrl(url);
    //                            }
    //                        });
    //                    }
    //                    // 5000支付失败 6001重复请求 6002中途取消
    //                    if ("9000".equals(result.getResultCode())) {
    //                        Message message = Message.obtain();
    //                        message.what = UserMessageConstant.GUANGCAI_PAY_MSG;
    //                        EventBus.getDefault().post(message);
    //                        finish();
    //                    }
    //                }
    //            });
    //            if (!isIntercepted) {
    //                jumpByUrls(urls);
    //            }
    //        } else {

功能      	  快捷键

Ctrl+N:查找类

Ctrl+Shift+N:查找文件

Ctrl+Alt+L :格式化代码

Ctrl+Alt+O:优化导入的类和包

Ctrl+/:注释代码 格式：//代码块

Ctrl+Shift+/:注释多行代码 格式:/*代码块*/

Ctrl+Alt+Space(空格):自动补全代码

Ctrl+空格:代码感应提示

Ctrl+Alt+Space:类名和接口名提示

studio_splash

Ctrl+Shift+Alt+N:查找类中的方法和变量

Ctrl+Shift+C:对比最近修改的代码

Ctrl+Alt+Left/Right:返回至上次浏览的位置

Ctrl+[或]：可以调到大括号的开头结尾

Ctrl+Shift+Backspace:可以跳转到上次编辑的地方

Ctrl+F12:可以显示当前文件的结构

Ctrl+ALt+V:可以引入变量。例如把括号内的sql赋成一个变量

Ctrl+F7：可以查询当前元素在当前文件中的引用，然后按F3可以选择

Ctrl+Alt+T：可以把代码包在一块内，例如try/catch

Ctrl+J:自动代码

Ctrl+R:替换文本

Ctrl+E:最近打开的文件

Ctrl+H:显示类结构图

Ctrl+F:查找文本

Ctrl+P:提示方法的参数信息

Ctrl+Q:光标选中方法显示该方法的详细参数信息

Ctrl+X:删除行

Ctrl+D:复制行


Shift+F6:类重命名

Shift+Alt+向上箭头：代码往上移

Shift+Alt+向下箭头：代码往下移

Alt+Insert:快速生成构造方法或是GET,SET方法

Alt+Enter:感应代码提示 例如方法转型

Alt+回车：导入包，自动修正

Alt+F1:查找代码所在的位置

Alt+l:快速打开或隐藏工程面板

Alt+Left/Right:切换代码视图

Alt+Up/Down:在方法间快速移动定位

获取 App 的信息
App 信息

获取当前界面元素：adb shell dumpsys activity top
获取任务列表：adb shell dumpsys activity activities

App 入口

adb logcat |grep -i displayed
aapt dump badging mobike.apk | grep launchable-activity
apkanalyzer 最新版本的 SDK 中才有

启动应用

adb shell am start -W -n com.xueqiu.android/.view.WelcomeActivityAlias -S

Android 常用命令

adb:Android Debug Bridge
adb devices:查看设备
adb kill-server:关闭 adb 的后台进程
adb tcpip:让 Android 脱离 USB 线的 TCP 连接方式
adb connect:连接开启了 TCP 连接方式的手机
adb logcat:Android 日志查看
adb bugreport:收集日志数据，用于后续的分析，比如耗电量

adb shell
adb shell 本身就是一个 Linux 的 shell，可以调用 Android 内置命令
adb shell

adb shell dumpsys
adb shell pm
adb shell am
adb shell ps
adb shell monkey

测试常用命令
adb
pm
am
dumpsys
uiautomator
input

Android 性能统计 dumpsys

获取所有的 dumpsys 子命令 dumpsys | grep -i DUMP
获取当前 activity adb shell dumpsys activity top
获取 activities 的记录，可以获取到 appium 依赖的原始 activity dumpsys activity activities
获取特定包基本信息 adb shell dumpsys package com.xueqiu.android
获取系统通知 adb shell dumpsys notiﬁcation
获得内存信息 adb shell dumpsys meminfo com.android.settings
获取 cpu 信息 adb shell dumpsys cpuinfo
获取 gpu 绘制分析 adb shell dumpsys gfxinfo com.android.settings
获取短信 adb shell dumpsys activity broadcasts | grep senderName=

uiautomator

adb shell uiautomator runtest ...
adb shell uiautomator dump

简单的自动化工具 adb shell input 命令

text  (Default: touchscreen)
keyevent [--longpress]  ... (Default: keyboard)
tap   (Default: touchscreen)
swipe     [duration(ms)] (Default: touchscreen)
draganddrop     [duration(ms)] (Default: touchscreen)
press (Default: trackball)
roll   (Default: trackbal

